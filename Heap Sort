                                                  HEAP SORT 
                                                *************
Introduction:
-------------
Sorting refers to arranging a list of elements in ascending or descending order. There are several sorting strategies , one of the sorting strategy is Heap Sort. Heap Sort is a comparision based sorting algorithm. It can be considered as a modified version of Selection Sort : as like this it divides the list/array into two parts : sorted and unsorted, and then reduces the unsorted part by extracting the largest element and shifting it to the sorted part and the process is repeated for rest elements. The modification include using a heap data structure rather than using a linear time to find out maximum.
Implementation :
Heap sort can be implemented using heap data structures. Binary Heap can be categorised into two types:
⦁	Max Heap : A binary tree data structure, where each parent node is greater than its children node.
⦁	Min Heap : A binary tree data structure, where each parent node is smaller than its children node.

The algorithm follows two steps ,
⦁	The first step involves creating a max-heap out of the given unsorted list / array. Each element is considered as a node , and the parent , the left child and the right child can be decided using the following formula for a zero based index.
        Parent node : floor((i-1)/2)   [For a given index i]
        Left child : 2*i+1
        Right child : 2*i+2  

⦁	The second step involves creation of sorted array by repeated removal of largest element from the heap and inserting it to array and after the element is removed, the tree is updated to maintain heap.

Hence the steps follows as:
⦁	Call a heapify function to create a heap.
⦁	Swap the first element with the last element and then heapify the rest of the list except the last element, which is already in its correct place. 
⦁	Decrease the length of list by one.
⦁	Repeat step2 until the heap contains single element.


PseudoCode :
------------

Heap_sort(A,n)
    A[0]=n
    Heapify(A) 
    
    While A[0]>1
           End = A[0]
           Swap(A[1],A[End]) 
           A[0]--
           shift(A,1) 
    end while



 
Implementation Using Program(C++):
---------------------------------

#include <bits/stdc++.h>
using namespace std;

//creation of shift function where i represents the parent node
void shift(int a[],int i)
{
    int j,k=1;
    int n=a[0];
    while(2*i<=n && k==1) 
    {
       j=2*i;  //j represents to left child
       if(j+1<=n && a[j+1] > a[j])
           j=j+1;

       if( a[j] < a[i])
           k=0;
       else
       
       //swaping parent and left child if left child is greater than parent node
        swap(a[i],a[j]);
      }
}

//Creation of heapify function or creation of heap
void heapify(int a[])
{
    int i,n;
    n=a[0];
    for(i=n/2;i>=1;i--)
    shift(a,i);
}


void heapSort(int a[],int n){
    	a[0]=n;
    heapify(a); //calling heapify function
    
    //sorting
    while(a[0] > 1)
    {
      int end=a[0];
      
      //swaping a[1st] and a[last]
      swap(a[1],a[end]);
      a[0]--;
      shift(a,1);
    }
}


int main() {
    int n; //n represents the size of array
    cin>>n;
    int a[n];
    for(int i=1;i<=n;i++) //taking input of array
    cin>>a[i];
    
    //Creating a heap
    a[0]=n;
    heapify(a); //calling heapify function
	
	heapSort(a, n); //calling heapSort function

	cout << "Sorted array is \n"; 
	for(int i=1;i<=n;i++) //printing sorted array
	cout<<a[i]<<" ";
	return 0;
    
}


Time Complexity :
-----------------
Time complexity of heapify() function is O(logn)  ,  time complexity of shift() function is O(n)  and hence overall time complexity of heapSort() ia O(nlogn) in all cases ( that is in best case, average case ,and worst case ). This is becase the height of a complete binary tree of n nodes is logn . 


Space Complexity:
-----------------
Heap Sort have a space complexity of O(1) , since the heap is built each time inside the array to be sorted and also because heap sort is an in-place sorting algorithm.


Advantages of Heap Sort :
------------------------
⦁	Heap sort is highly efficient as other sorting algorithms increases exponentially slower while heap sort increases logarithmically.
⦁	It is an inplace sorting algorithm , hence memory required is minimal.
⦁	It is also a consistent algorithm, that is performs equally in all case (best, worst and average cases).


Disadvantages of Heap Sort :
----------------------------
⦁	It is not a stable algorithm that is , the operations on heap can change the relative order of equal elements.


Applications of  Heap Data Structures :
---------------------------------------
⦁	Heap data structure is used in priority queues.
⦁	It is used in graphs : mainly in Dikstra’s Algorithm.
⦁	It is also used to implement Heap Sort.
        
